name: Deploys

on:
  workflow_run:
    workflows: ["Release Generator"]
    types:
      - completed  

permissions:
  packages: write      


concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event }}
  cancel-in-progress: true
jobs:

  tagext:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    env:
      OS: ${{ matrix.os }}
      PYTHON: '3.8'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Getting Tag
        id: tag_extractor
        run: echo "latest_tag=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"

      - name: Getting Tag 2
        id: tag_extractor_2
        run: |
          TAG=${{ steps.tag_extractor.outputs.latest_tag }}   
          echo "latest_tag_2=${TAG:1} " >> "$GITHUB_OUTPUT"
      
      - name: Discord Webhook Action
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DEPLOY_WEBHOOK_URL }}
          content: "Requested <@&1148701924615520256> ${{ steps.tag_extractor.outputs.latest_tag }}"


  pypi:
    needs: tagext
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: Deploys
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}


    - name: Build and Publish Python Packages
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine      
        python setup.py sdist
        twine upload dist/*
        cd setups/api/
        python setup.py sdist
        twine upload dist/*
        cd ..
        cd gui
        python setup.py sdist
        twine upload dist/*
        cd ..
        cd web
        python setup.py sdist
        twine upload dist/*
        cd ..


  docker:
    needs: tagext
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: Deploys
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Getting Tag
      id: tag_extractor
      run: echo "latest_tag=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}


    - name: Build and Publish Docker Images
      env:
        VERSION: ${{ steps.tag_extractor.outputs.latest_tag }}
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ghcr.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        cd .. 
        docker build -t ghcr.io/kot-database/api:latest -f KOT/docker/local/api/Dockerfile .
        docker build -t ghcr.io/kot-database/api:$VERSION -f KOT/docker/local/api/Dockerfile .  
        docker push ghcr.io/kot-database/api:latest
        docker push ghcr.io/kot-database/api:$VERSION

        docker build -t ghcr.io/kot-database/web:latest -f KOT/docker/local/web/Dockerfile .
        docker build -t ghcr.io/kot-database/web:$VERSION -f KOT/docker/local/web/Dockerfile .  
        docker push ghcr.io/kot-database/web:latest
        docker push ghcr.io/kot-database/web:$VERSION


  sleep:
    needs: [pypi, docker]
    runs-on: ubuntu-latest
    steps:
    - name: Sleep for 300 seconds
      uses: jakejarvis/wait-action@master
      with:
        time: '300s'        



  success:
    needs: [pypi, docker, sleep]
    runs-on: ubuntu-latest
    if: ${{ (needs.pypi.result == 'success' || needs.sleep.result == 'success' || needs.docker.result == 'success') }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Getting Tag
        id: tag_extractor
        run: echo "latest_tag=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"
  
      - name: Discord Webhook Action
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DEPLOY_WEBHOOK_URL }}
          content: "success <@&1148701924615520256> ${{ steps.tag_extractor.outputs.latest_tag }}"           



  failure:
    needs: [pypi, docker, sleep]
    runs-on: ubuntu-latest
    if: ${{ (needs.pypi.result == 'failure' || needs.sleep.result == 'failure' || needs.docker.result == 'failure') }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Getting Tag
        id: tag_extractor
        run: echo "latest_tag=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"

      - name: Discord Webhook Action
        uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DEPLOY_WEBHOOK_URL }}
          content: "failure <@&1148701924615520256> ${{ steps.tag_extractor.outputs.latest_tag }}"           
